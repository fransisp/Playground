/**
 * Organisation Services
 * These are the services for the organisation site. These will be called by the frontend to provide the data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: fr.prayuda@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.server.apis


import com.google.gson.Gson
import com.google.gson.GsonBuilder
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.http.ContentType
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.get
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import org.openapitools.server.Paths

@KtorExperimentalLocationsAPI
fun Route.employeeApi() {
    /**
     * A Gson Builder with pretty printing enabled.
     */
    val gson: Gson = GsonBuilder().setPrettyPrinting().create()

    val empty = mutableMapOf<String, Any?>()
    get<Paths.GetMemberInfo> {
        val principal = call.authentication.principal<UserIdPrincipal>()?.name
        val inputQuery = call.parameters["employeeID"] ?: ""

        val exampleContentType = "application/json"
        val exampleContentString = """{
              "empid" : "empid",
              "jobtitle" : "jobtitle",
              "phone" : "phone",
              "name" : "name",
              "id" : 1,
              "email" : "email"
            }"""
        // val result = getEmployeeInfo(inputQuery)

        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
}
