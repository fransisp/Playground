/**
 * Organisation Services
 * These are the services for the organisation site. These will be called by the frontend to provide the data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: fr.prayuda@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.server.apis


import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.authentication
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.get
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import org.openapitools.server.Paths
import org.openapitools.server.infrastructure.ApiPrincipal

@KtorExperimentalLocationsAPI
fun Route.OrganigramApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    get<Paths.getBranchInfo> { _: Paths.getBranchInfo ->
        val principal = call.authentication.principal<ApiPrincipal>()

        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "description" : "description",
              "location" : "location",
              "id" : 0,
              "departments" : [ {
                "name" : "name",
                "description" : "description",
                "id" : 6,
                "employees" : [ {
                  "empid" : "empid",
                  "jobtitle" : "jobtitle",
                  "phone" : "phone",
                  "name" : "name",
                  "id" : 1,
                  "email" : "email"
                }, {
                  "empid" : "empid",
                  "jobtitle" : "jobtitle",
                  "phone" : "phone",
                  "name" : "name",
                  "id" : 1,
                  "email" : "email"
                } ],
                "lead" : "lead"
              }, {
                "name" : "name",
                "description" : "description",
                "id" : 6,
                "employees" : [ {
                  "empid" : "empid",
                  "jobtitle" : "jobtitle",
                  "phone" : "phone",
                  "name" : "name",
                  "id" : 1,
                  "email" : "email"
                }, {
                  "empid" : "empid",
                  "jobtitle" : "jobtitle",
                  "phone" : "phone",
                  "name" : "name",
                  "id" : 1,
                  "email" : "email"
                } ],
                "lead" : "lead"
              } ],
              "lead" : "lead"
            }"""

            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }

    }


    get<Paths.getDepartmentInfo> { _: Paths.getDepartmentInfo ->
        val principal = call.authentication.principal<ApiPrincipal>()

        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "description" : "description",
              "id" : 6,
              "employees" : [ {
                "empid" : "empid",
                "jobtitle" : "jobtitle",
                "phone" : "phone",
                "name" : "name",
                "id" : 1,
                "email" : "email"
              }, {
                "empid" : "empid",
                "jobtitle" : "jobtitle",
                "phone" : "phone",
                "name" : "name",
                "id" : 1,
                "email" : "email"
              } ],
              "lead" : "lead"
            }"""

            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }

    }

}
